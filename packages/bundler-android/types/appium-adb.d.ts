
export type device = {
  udid: string;
  state: string;
};
export class ADB {
  static createADB(opts?: any): Promise<ADB>;
  constructor(opts: any);
  adbPort: any;
  adbExec(cmd: any, opts: any): any;
  adbExecEmu(cmd: any): void;
  androidCoverage(instrumentClass: any, waitPkg: any, waitActivity: any): any;
  availableIMEs(): any;
  back(): void;
  broadcast(intent: any): void;
  broadcastAirplaneMode(on: any): void;
  broadcastProcessEnd(intent: any, processName: any): void;
  bugreport(timeout: any): any;
  cacheApk(apkPath: any, options: any): any;
  checkApkCert(appPath: any, pkg: any): any;
  checkApkKeystoreMatch(keytool: any, md5re: any, keystoreHash: any, pkg: any, apk: any): any;
  checkAvdExist(avdName: any): void;
  checkCustomApkCert(appPath: any, pkg: any): any;
  clear(pkg: any): any;
  clearTextField(length: any): void;
  compileManifest(manifest: any, manifestPackage: any, targetPackage: any): void;
  createSubProcess(args: any): any;
  defaultIME(): any;
  deleteHttpProxy(): void;
  disableIME(imeId: any): void;
  enableIME(imeId: any): void;
  enabledIMEs(): any;
  endAndroidCoverage(): void;
  ensureCurrentLocale(language: any, country: any, script: any): any;
  execBundletool(args: any, errorMsg: any): any;
  executeApksigner(args: any): any;
  extractBaseApk(apks: any): any;
  extractLanguageApk(apks: any, language: any): any;
  extractStringsFromApk(appPath: any, language: any, out: any): any;
  fileExists(remotePath: any): any;
  fileSize(remotePath: any): any;
  fingerprint(fingerprintId: any): void;
  forceStop(pkg: any): any;
  forwardAbstractPort(systemPort: any, devicePort: any): void;
  forwardPort(systemPort: any, devicePort: any): void;
  getAdbPath(): any;
  getAdbServerPort(): any;
  getAdbVersion(...args: any[]): any;
  getAdbWithCorrectAdbPath(): any;
  getApiLevel(): any;
  getApkInfo(appPath: any): any;
  getApplicationInstallState(appPath: any, pkg: any): any;
  getBinaryFromPath(binaryName: any): any;
  getBinaryFromSdkRoot(...args: any[]): any;
  getBinaryNameForOS(...args: any[]): any;
  getCommandForOS(...args: any[]): any;
  getConnectedDevices(): device[];
  getConnectedEmulators(): device[];
  getDeniedPermissions(pkg: any, cmdOutput: any): any;
  getDeviceCountry(): any;
  getDeviceLanguage(): any;
  getDeviceLocale(): any;
  getDeviceProductCountry(): any;
  getDeviceProductLanguage(): any;
  getDeviceProductLocale(): any;
  getDeviceProperty(property: any): any;
  getDeviceSpec(specLocation: any): any;
  getDeviceSysCountry(): any;
  getDeviceSysLanguage(): any;
  getDeviceSysLocale(): any;
  getDevicesWithRetry(timeoutMs?: number): device[];
  getEmulatorPort(): any;
  getFocusedPackageAndActivity(): any;
  getForwardList(): any;
  getGeoLocation(): any;
  getGrantedPermissions(pkg: any, cmdOutput: any): any;
  getKeystoreMd5(keytool: any, md5re: any): any;
  getLocationProviders(): any;
  getLogcatLogs(): any;
  getManufacturer(): any;
  getModel(): any;
  getPIDsByName(name: any): any;
  getPackageInfo(pkg: any): any;
  getPlatformVersion(): any;
  getPortFromEmulatorString(emStr: any): any;
  getReqPermissions(pkg: any, cmdOutput: any): any;
  getReverseList(): any;
  getRunningAVD(avdName: any): any;
  getRunningAVDWithRetry(avdName: any, timeoutMs: any): any;
  getScreenDensity(): any;
  getScreenOrientation(): any;
  getScreenSize(): any;
  getSdkBinaryPath(...args: any[]): any;
  getSetting(namespace: any, setting: any): any;
  goToHome(): void;
  grantAllPermissions(pkg: any, apk: any): void;
  grantPermission(pkg: any, permission: any): void;
  grantPermissions(pkg: any, permissions: any): void;
  gsmCall(phoneNumber: any, action: any): void;
  gsmSignal(strength: any): void;
  gsmVoice(state: any): void;
  hasInternetPermissionFromManifest(appPath: any): any;
  initAapt(): void;
  initBundletool(): void;
  initJars(): void;
  initZipAlign(): void;
  inputText(text: any): void;
  insertManifest(manifest: any, srcApk: any, dstApk: any): void;
  install(appPath: any, options?: any): Promise<void>;
  installApks(apks: any, options: any): void;
  installFromDevicePath(apkPathOnDevice: any, opts: any): void;
  installMitmCertificate(cert: any): void;
  installOrUpgrade(appPath: any, pkg: any, options: any): void;
  instrument(pkg: any, activity: any, instrumentWith: any): void;
  isAirplaneModeOn(): any;
  isAnimationOn(): any;
  isAppInstalled(pkg: any): any;
  isDataOn(): any;
  isDeviceConnected(): any;
  isEmulatorConnected(): any;
  isMitmCertificateInstalled(cert: any): any;
  isRoot(): any;
  isScreenLocked(): any;
  isSoftKeyboardPresent(): any;
  isValidClass(classString: any): any;
  isWifiOn(): any;
  keyevent(keycode: any): void;
  killAllEmulators(): void;
  killEmulator(avdName: any, timeout: any): any;
  killPackage(pkg: any): any;
  killProcessByPID(pid: any): any;
  killProcessesByName(name: any): void;
  killServer(): void;
  launchAVD(avdName: any, avdArgs: any, language: any, country: any, avdLaunchTimeout: any, avdReadyTimeout: any, retryTimes: any): any;
  lock(): void;
  ls(remotePath: any, opts: any): any;
  mkdir(remotePath: any): any;
  networkSpeed(speed: any): void;
  packageAndLaunchActivityFromManifest(appPath: any): any;
  performEditorAction(action: any): void;
  ping(): any;
  powerAC(state: any): void;
  powerCapacity(percent: any): void;
  powerOFF(): void;
  printManifestFromApk(appPath: any, logLevel: any): void;
  processExists(processName: any): any;
  processFromManifest(localApk: any): any;
  pull(remotePath: any, localPath: any): void;
  pullApk(pkg: any, tmpDir: any): any;
  push(localPath: any, remotePath: any, opts: any): void;
  reboot(retries: any): void;
  removeLogcatListener(listener: any): void;
  removePortForward(systemPort: any): void;
  removePortReverse(devicePort: any): void;
  resetTelnetAuthToken(...args: any[]): any;
  restart(): void;
  restartAdb(): void;
  reversePort(devicePort: any, systemPort: any): void;
  revokePermission(pkg: any, permission: any): void;
  rimraf(path: any): void;
  root(): any;
  rotate(): void;
  screenrecord(destination: any, options: any): any;
  sendSMS(phoneNumber: any, message: any): void;
  sendTelnetCommand(command: any): any;
  setAirplaneMode(on: any): void;
  setAnimationState(on: any): void;
  setDataState(on: any, isEmulator: any): void;
  setDefaultHiddenApiPolicy(): void;
  setDevice(deviceObj: device): void;
  setDeviceId(deviceId: device['udid']): void;
  setDeviceLanguageCountry(language: any, country: any, script: any): void;
  setDeviceLocale(locale: any): void;
  setDeviceProperty(prop: any, val: any): void;
  setDeviceSysLocaleViaSettingApp(language: any, country: any, script: any): void;
  setEmulatorPort(emPort: any): void;
  setGeoLocation(location: any, isEmulator: any): any;
  setHiddenApiPolicy(value: any): void;
  setHttpProxy(proxyHost: any, proxyPort: any): void;
  setIME(imeId: any): void;
  setLogcatListener(listener: any): void;
  setSetting(namespace: any, setting: any, value: any): any;
  setWifiAndData({
    wifi,
    data
  }: any, isEmulator: any): void;
  setWifiState(on: any, isEmulator: any): void;
  shell(cmd: string | string[], opts?: any): any;
  sign(appPath: any): void;
  signWithCustomCert(apk: any): void;
  signWithDefaultCert(apk: any): void;
  startApp(startAppOptions: any): any;
  startLogcat(): void;
  startUri(uri: any, pkg: any): void;
  stopAndClear(pkg: any): void;
  stopLogcat(): void;
  targetSdkVersionFromManifest(appPath: any): any;
  targetSdkVersionUsingPKG(pkg: any, cmdOutput: any): any;
  toggleGPSLocationProvider(enabled: any): void;
  uninstallApk(pkg: any, options: any): any;
  unroot(): any;
  verifyEmulatorConnected(): void;
  waitForActivity(pkg: any, act: any, waitMs: any): void;
  waitForActivityOrNot(pkg: any, activity: any, waitForStop: any, waitMs: any): void;
  waitForDevice(appDeviceReadyTimeout: any): void;
  waitForEmulatorReady(timeoutMs: any): void;
  waitForNotActivity(pkg: any, act: any, waitMs: any): void;
  zipAlignApk(apk: any): any;
}
export const DEFAULT_ADB_PORT: number;
export default ADB
